/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT     0
#define LOWER       1
#define RAISE       2
#define NUM	    	3
#define LAST 		4

//Encoder Support by Preacher325 https://github.com/Preacher325/Sofle_RGB_ZMK/blob/master/config/sofle.keymap
//Alps Alpine EC11N1524402: 30 Detent, 15PPR, 2 Channel, Quadrature, 15000 Cycle
/ {
    left_encoder: encoder_left {
        compatible = "alps,ec11";
        label = "LEFT_ENCODER";
        a-gpios = <&pro_micro 21 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&pro_micro 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        steps = <60>;
    };
    right_encoder: encoder_right {
        compatible = "alps,ec11";
        label = "RIGHT_ENCODER";
        a-gpios = <&pro_micro 21 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&pro_micro 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        steps = <60>;
    };
    sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&left_encoder &right_encoder>;
        triggers-per-rotation = <30>;
    };
};
/ {
    macros {
// System and Power
        tm: tm {
            label = "TASK_MANAGER";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LSHFT>
                , <&macro_tap &kp ESC>
                , <&macro_release &kp LCTRL &kp LSHFT>
                ;
        };
        cad: cad{
            label = "CTRL_ALT_DEL";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LALT &kp DEL>
                , <&macro_release &kp LCTRL &kp LALT &kp DEL>
                ;
        };
        slp: slp {
            label = "SLEEP";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LGUI>
                , <&macro_tap &kp X>
                , <&macro_release &kp LGUI>
                , <&macro_tap &kp U &kp S>
                ;
        };
        rst: rst {
            label = "RESTART";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LGUI>
                , <&macro_tap &kp X>
                , <&macro_release &kp LGUI>
                , <&macro_tap &kp U &kp R>
                ;
        };
        off: off {
            label = "SHUTDOWN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LGUI>
                , <&macro_tap &kp X>
                , <&macro_release &kp LGUI>
                , <&macro_tap &kp U &kp U>
                ;
        };
// Browser Controls
        tab_right: tab_right {
        label = "TAB_RIGHT";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
            = <&macro_press   &kp LCTRL>
            , <&macro_tap     &kp TAB>
            , <&macro_release &kp LCTRL>;
        };
        tab_left: tab_left {
        label = "TAB_LEFT";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
            = <&macro_press   &kp LCTRL &kp LSHFT>
            , <&macro_tap     &kp TAB>
            , <&macro_release &kp LCTRL &kp LSHFT>;
        };
        close_tab: close_tab {
        label = "CLOSE_TAB";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <0>;
        tap-ms = <0>;
        bindings
            = <&macro_press   &kp LCTRL>
            , <&macro_tap     &kp W>
            , <&macro_release &kp LCTRL>;
        };
	};
};
// Mod Morphs, Encoder, Tap-Dances
/ {
    behaviors {
// Encoder
        tab_browser: tab_browser {
            compatible = "zmk,behavior-sensor-rotate";
            label = "TAB_BROWSER";
            #sensor-binding-cells = <0>;
            bindings = <&tab_left>, <&tab_right>;
        };
	};
};
/ {
    combos {
        compatible = "zmk,combos";

	// arrow keys
	combo_right {
	timeout-ms = <50>;
	key-positions = <27 28>; // KP: DF
	bindings = <&kp RIGHT>; // 方便中文输入切换下一个选项，结合右手的JK enter，小键盘输入中文也毫无障碍
	layers = <0 1 2 3>;
		};
	combo_left {
	timeout-ms = <50>;
	key-positions = <26 27>; // KP: SD
	bindings = <&kp LEFT>; // 同上逻辑，方便中文输入。再加上强迫症，所以上下左右都放了，形成一个像游戏手柄的D-Pad
	layers = <0 1 2 3>;
		};
	combo_up{
	timeout-ms = <50>;
	key-positions = <15 27>; // KP: ED
	bindings = <&kp UP>; // 上下键不怎么用，一些需要用上下左右的组合软件功能键，我都放在切层里，用上一篇中方向键的位置。如果使用的话是直接按两个键中间
	layers = <0 1 2 3>;
		};
	combo_down {
	timeout-ms = <50>;
	key-positions = <27 39>; // KP: DX
	bindings = <&kp DOWN>; 
	layers = <0 1 2 3>;
		};
	
	// {}[]()
	combo_lbrc{
	timeout-ms = <50>;
	key-positions = <16 17>; // KP: RT
	bindings = <&kp LBRC>; 
	layers = <0 1 2 3>;
		};
	combo_rbrc{
	timeout-ms = <50>;
	key-positions = <18 19>; // KP: YU
	bindings = <&kp RBRC>; 
	layers = <0 1 2 3>;
		};
	combo_lbkt{
	timeout-ms = <50>;
	key-positions = <28 29>; // KP: FG
	bindings = <&kp LBKT>; 
	layers = <0 1 2 3>;
		};
	combo_rbkt{
	timeout-ms = <50>;
	key-positions = <30 31>; // KP: HJ
	bindings = <&kp RBKT>; 
	layers = <0 1 2 3>;
		};
	combo_lpar{
	timeout-ms = <50>;
	key-positions = <40 41>; // KP: CV
	bindings = <&kp LPAR>; 
	layers = <0 1 2 3>;
		};
	combo_rpar{
	timeout-ms = <50>;
	key-positions = <44 45>; // KP: BN
	bindings = <&kp RPAR>; 
	layers = <0 1 2 3>;
		};
		
	// mixed setups
	combo_bkslash {
	timeout-ms = <50>;
	key-positions = <27 40>; // KP: DC
	bindings = <&kp BSLH>; 
	layers = <0 1 2 3>;
		};
	combo_slash {
	timeout-ms = <50>;
	key-positions = <32 45>; // KP: KN
	bindings = <&kp FSLH>; 
	layers = <0 1 2 3>;
		};
	combo_cplk {
	timeout-ms = <50>;
	key-positions = <24 25>; // KP: TABA
	bindings = <&kp CAPS>; 
	layers = <0 1 2 3>;
		};
	combo_minus {
	timeout-ms = <50>;
	key-positions = <8 9>; // KP: 89
	bindings = <&kp MINUS>; 
	layers = <0 1 2 3>;
		};
	combo_equal {
	timeout-ms = <50>;
	key-positions = <9 10>; // KP: 90
	bindings = <&kp EQUAL>; 
	layers = <0 1 2 3>;
		};
	combo_bspc {
	timeout-ms = <50>;
	key-positions = <0 1>; // KP: GRAVE1
	bindings = <&kp BSPC>; 
	layers = <0 1 2 3>;
		};
	combo_dell {
	timeout-ms = <50>;
	key-positions = <1 12>; // KP: 1ESC
	bindings = <&kp DEL>; 
	layers = <0 1 2 3>;
		};
	combo_delr {
	timeout-ms = <50>;
	key-positions = <10 23>; // KP: 0BSLH
	bindings = <&kp DEL>; 
	layers = <0 1 2 3>;
		};
	combo_qmark {
	timeout-ms = <50>;
	key-positions = <48 49>; // KP: DOTFSLH
	bindings = <&kp QMARK>; 
	layers = <0 1 2 3>;
		};
	combo_quote {
	timeout-ms = <50>;
	key-positions = <2 13>; // KP: 2Q
	bindings = <&kp SQT>; 
	layers = <0 1 2 3>;
		};
	};
};

// combo keys showdown
// ------------------------------------------------------------------------------------------------------------
// |  0   |  1  |  2  |  3   |  4   |  5   |                |  6   |  7    |  8   |  9   |  10  |  11  |
// |  12  |  13 |  14 |  15  |  16  |  17  |                |  18  |  19   |  20  |  21  |  22  |  23  |
// |  24  |  25 |  26 |  27  |  28  |  29  |                |  30  |  31   |  32  |  33  |  34  |  35  |
// |  36  |  37 |  38 |  39  |  40  |  41  |  42  |  |  43  |  44  |  45   |  46  |  47  |  48  |  49  |
//              |  50 |  51  |  52  |  53  |  54  |  |  55  |  56  |  57   |  58  |  59  |

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  `    |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   | BKSPC |
// |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   \   |
// |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   | ENTER |
// | SHIFT |     |  Z  |  X   |  C   |  V   |  ousb  |  | tog4  |  B   |  N    |  M    |  ,   |   .   |   /   |
//               | GUI | ALT  | CTRL | LOWER|  SPACE |  | SPACE | RAISE| CTRL  | ALT   | GUI  |
            bindings = <
&kp GRAVE	&kp N1		&kp N2		&kp N3		&kp N4		&kp N5									&kp N6		&kp N7		&kp N8		&kp N9		&kp N0		&kp BSPC
&kp ESC		&kp Q		&kp W		&kp E		&kp R		&kp T									&kp Y		&kp U		&kp I		&kp O		&kp P		&kp BSLH
&kp TAB		&kp A		&kp S		&kp D		&kp F		&kp G									&kp H		&kp J		&kp K		&kp L		&kp SEMI	&kp RET
&kp LSHFT	&tog NUM	&kp Z		&kp X		&kp C		&kp V		&out OUT_USB	&tog LAST	&kp B		&kp N		&kp M		&kp COMMA	&kp DOT		&mt RSHIFT FSLH
						&kp LGUI	&kp LALT	&kp LCTRL	&lt 1 RET	&kp SPACE		&kp SPACE	&lt 2 RET	&kp RCTRL	&kp RALT	&kp RGUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &tab_browser>;
        };

        lower_layer {
// TODO: Some binds are waiting for shifted keycode support.
// ------------------------------------------------------------------------------------------------------------
// |  DEL  |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
// | BKSPC | CASQ|  7  |   8  |   9  |  CST |                   |   1  |   2   |   3   |   4  |    5  |  F12  |
// |       |  6  |  @  |  #   |   0  |  .   |                   |  ^   |  &    |  *    |  (   |   )   |   '   |
// |       |  =  |  -  |  +   |  {   |  }   |  oble  |  |       |  [   |  ]    |  ;    |  :   |   ?   |       |
//               |     |      |      |      |        |  |       |      |       |       |      |
            bindings = <
&kp DEL		&kp F1				&kp F2			&kp F3		&kp F4		&kp F5								&kp F6		&kp F7		&kp F8			&kp F9		&kp F10		&kp F11
&kp BSPC	&kp LC(LS(LA(Q)))	&kp N7			&kp N8		&kp N9		&kp LC(LS(T))						&kp N1		&kp N2		&kp N3			&kp N4		&kp N5		&kp F12
&trans		&kp N6				&kp LS(LG(S))	&kp HASH	&kp N0		&kp DOT								&kp CARET	&kp AMPS	&kp KP_MULTIPLY	&kp LPAR	&kp RPAR	&kp SQT
&trans		&kp EQUAL			&kp MINUS		&kp KP_PLUS	&kp LBRC	&kp RBRC	&out OUT_BLE	&trans  &kp LBKT	&kp RBKT	&kp SEMI		&kp COLON	&kp QMARK	&trans
								&trans			&trans		&trans		&trans		&trans			&trans  &trans		&trans		&trans			&trans
            >;

            sensor-bindings = <&inc_dec_kp PG_DN PG_UP &inc_dec_kp UP DOWN>;
        };

        raise_layer {
// ------------------------------------------------------------------------------------------------------------
// |     | BT1  | BT2  |  BT3  |  BT4  |  BT5 |                | BT1  | BT2  |  BT3  | BT4  |  BT5  |  DEL  |
// |     | INS  | PSCR | GUI   |       |      |                | PGUP | HOME |   ^   | END  |       |       |
// |     | ALT  | CTRL | SHIFT |       | CAPS |                | PGDN |   <- |   v   |  ->  |       | BKSPC |
// |     | UNDO | CUT  | COPY  | PASTE |      |      |  |      |BTCLR |      |       |      |       |       |
//              |      |       |       |      |      |  |      |      |      |       |      |
            bindings = <
&trans		&bt BT_SEL 0	&bt BT_SEL 1	&bt BT_SEL 2	&bt BT_SEL 3	&bt BT_SEL 4				&bt BT_SEL 0	&bt BT_SEL 1	&bt BT_SEL 2	&bt BT_SEL 3	&bt BT_SEL 4	&kp DEL
&trans		&kp INS			&kp PSCRN		&kp K_CMENU		&trans			&trans						&kp PG_UP		&kp HOME		&kp UP			&kp END			&kp N0			&trans
&trans		&kp LALT		&kp LCTRL		&kp LSHFT		&trans			&kp CLCK					&kp PG_DN		&kp LEFT		&kp DOWN		&kp RIGHT		&trans			&kp BSPC
&trans		&kp K_UNDO		&kp K_CUT		&kp K_COPY		&kp K_PASTE		&trans		&trans	&trans	&bt BT_CLR		&trans			&trans			&trans			&trans			&trans
							&trans			&trans			&trans			&trans		&trans	&trans	&trans			&trans			&trans			&trans
            >;

            sensor-bindings = <&inc_dec_kp DOWN UP &inc_dec_kp RIGHT LEFT>;
        };
	num_layer {
// ------------------------------------------------------------------------------------------------------------
// |  `    |BKSPC|  *  |  /   | tog3 |  DEL |                   |  6   | tog3 |  /  |  *   |     | BKSPC |
// |  ESC  |  -  |  9  |  8   |  7   |      |                   |  Y   |  7   |  8  |  9   |  -  |   \   |
// |  TAB  |  +  |  6  |  5   |  4   |      |                   |  H   |  4   |  5  |  6   |  +  | ENTER |
// | SHIFT |     |  3  |  2   |	 1	 |      |  MUTE  |  | CAPS  |  B   |  1   |  2  |  3   |ENTER|   /   |
//               |ENTER| .	  |  0	 | LOWER|  SPACE |  | SPACE | RAISE|  0   |  .  | GUI  |
            bindings = <
&trans	&kp BSPC	&kp KP_MULTIPLY	&kp FSLH	&tog NUM	&kp DEL					&kp N6	&tog NUM	&kp FSLH	&kp KP_MULTIPLY	&kp N0		&trans
&trans	&kp MINUS	&kp N9			&kp N8		&kp N7		&trans					&kp Y	&kp N7		&kp N8		&kp N9			&kp MINUS	&trans
&trans	&kp KP_PLUS	&kp N6			&kp N5		&kp N4		&trans					&kp H	&kp N4		&kp N5		&kp N6			&kp KP_PLUS	&trans
&trans	&trans		&kp N3			&kp N2		&kp N1		&trans	&trans	&trans	&kp B	&kp N1		&kp N2		&kp N3			&kp RET		&trans
					&kp RET			&kp DOT		&kp N0		&trans	&trans	&trans	&trans	&kp N0		&kp DOT		&trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp DOWN UP>;
        };
	last_layer {
            bindings = <
&none &none &none &none &none &none						&none &none &none &none &none &none
&none &none &none &none &none &none						&none &none &none &none &none &none
&none &none &none &none &none &none						&none &none &none &none &none &none
&none &none &none &none &none &none	&none  &tog LAST	&none &none &none &none &none &none
        	&none &none &none &none	&none  &none		&none &none &none &none
            >;
            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp DOWN UP>;
	    };
    };
};


